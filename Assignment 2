## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the 
## cachesolve should retrieve the inverse from the cache.

## The first function, makeCacheMatrix creates a special “vector”, 
## which is really a list containing a function to:
## 1)set the value of the matrix
## 2)get the value of the matrix 
## 3)set the value of the inverse 
## 4)get the value of the inverse 

makeCacheMatrix <- function(x = matrix()) {
  inverse <- NULL 					
  set_matrix <- function(y) {			
    x <<- y 				
    inverse <<- NULL
  }
  get_matrix <- function() x 				]
  set_inverse <- function(solve) inverse <<- solve 	
  get_inverse <- function() inverse 			
  list(set_matrix = set_matrix, get_matrix = get_matrix,
       set_inverse = set_inverse,
       get_inverse = get_inverse)
}


cacheSolve <- function(x, ...) {				
 inverse <- x$get_inverse()				
  if(!is.null(inverse)) {				
    message(“fetching cache“)			
    return(inverse)
  }
  data <- x$get_matrix()					
  inverse <- solve(data, ...)				
  x$set_inverse(inverse)					
  inverse 						
}
